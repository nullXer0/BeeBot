/*
 * This file is generated by jOOQ.
 */
package com.nullXer0.dbee.tables;


import com.nullXer0.dbee.Keys;
import com.nullXer0.dbee.Public;
import com.nullXer0.dbee.tables.DiscordRoles.DiscordRolesPath;
import com.nullXer0.dbee.tables.TeamMembers.TeamMembersPath;
import com.nullXer0.dbee.tables.TeamRoles.TeamRolesPath;
import com.nullXer0.dbee.tables.records.TeamsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Teams extends TableImpl<TeamsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.teams</code>
     */
    public static final Teams TEAMS = new Teams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamsRecord> getRecordType() {
        return TeamsRecord.class;
    }

    /**
     * The column <code>public.teams.team_id</code>.
     */
    public final TableField<TeamsRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.teams.name</code>.
     */
    public final TableField<TeamsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(63).nullable(false), this, "");

    private Teams(Name alias, Table<TeamsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Teams(Name alias, Table<TeamsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.teams</code> table reference
     */
    public Teams(String alias) {
        this(DSL.name(alias), TEAMS);
    }

    /**
     * Create an aliased <code>public.teams</code> table reference
     */
    public Teams(Name alias) {
        this(alias, TEAMS);
    }

    /**
     * Create a <code>public.teams</code> table reference
     */
    public Teams() {
        this(DSL.name("teams"), null);
    }

    public <O extends Record> Teams(Table<O> path, ForeignKey<O, TeamsRecord> childPath, InverseForeignKey<O, TeamsRecord> parentPath) {
        super(path, childPath, parentPath, TEAMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TeamsPath extends Teams implements Path<TeamsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TeamsPath(Table<O> path, ForeignKey<O, TeamsRecord> childPath, InverseForeignKey<O, TeamsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TeamsPath(Name alias, Table<TeamsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TeamsPath as(String alias) {
            return new TeamsPath(DSL.name(alias), this);
        }

        @Override
        public TeamsPath as(Name alias) {
            return new TeamsPath(alias, this);
        }

        @Override
        public TeamsPath as(Table<?> alias) {
            return new TeamsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TeamsRecord, Integer> getIdentity() {
        return (Identity<TeamsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeamsRecord> getPrimaryKey() {
        return Keys.TEAMS_PK;
    }

    private transient DiscordRolesPath _discordRoles;

    /**
     * Get the implicit to-many join path to the
     * <code>public.discord_roles</code> table
     */
    public DiscordRolesPath discordRoles() {
        if (_discordRoles == null)
            _discordRoles = new DiscordRolesPath(this, null, Keys.DISCORD_ROLES__DISCORD_ROLES_TEAM_ID_FKEY.getInverseKey());

        return _discordRoles;
    }

    private transient TeamMembersPath _teamMembers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.team_members</code> table
     */
    public TeamMembersPath teamMembers() {
        if (_teamMembers == null)
            _teamMembers = new TeamMembersPath(this, null, Keys.TEAM_MEMBERS__TEAM_MEMBERS_TEAM_ID_FKEY.getInverseKey());

        return _teamMembers;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.team_roles</code> table
     */
    public TeamRolesPath teamRoles() {
        return discordRoles().teamRoles();
    }

    @Override
    public Teams as(String alias) {
        return new Teams(DSL.name(alias), this);
    }

    @Override
    public Teams as(Name alias) {
        return new Teams(alias, this);
    }

    @Override
    public Teams as(Table<?> alias) {
        return new Teams(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teams rename(String name) {
        return new Teams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teams rename(Name name) {
        return new Teams(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teams rename(Table<?> name) {
        return new Teams(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teams where(Condition condition) {
        return new Teams(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teams where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teams where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teams where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teams where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teams where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teams where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Teams where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teams whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Teams whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
