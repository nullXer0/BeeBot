/*
 * This file is generated by jOOQ.
 */
package com.nullXer0.dbee.tables;


import com.nullXer0.dbee.Keys;
import com.nullXer0.dbee.Public;
import com.nullXer0.dbee.enums.TeamRole;
import com.nullXer0.dbee.tables.Teams.TeamsPath;
import com.nullXer0.dbee.tables.records.TeamMembersRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TeamMembers extends TableImpl<TeamMembersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.team_members</code>
     */
    public static final TeamMembers TEAM_MEMBERS = new TeamMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamMembersRecord> getRecordType() {
        return TeamMembersRecord.class;
    }

    /**
     * The column <code>public.team_members.id</code>.
     */
    public final TableField<TeamMembersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.team_members.team_id</code>.
     */
    public final TableField<TeamMembersRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.team_members.team_role</code>.
     */
    public final TableField<TeamMembersRecord, TeamRole> TEAM_ROLE = createField(DSL.name("team_role"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(TeamRole.class), this, "");

    /**
     * The column <code>public.team_members.date_joined</code>.
     */
    public final TableField<TeamMembersRecord, OffsetDateTime> DATE_JOINED = createField(DSL.name("date_joined"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.team_members.date_left</code>.
     */
    public final TableField<TeamMembersRecord, OffsetDateTime> DATE_LEFT = createField(DSL.name("date_left"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private TeamMembers(Name alias, Table<TeamMembersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TeamMembers(Name alias, Table<TeamMembersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.team_members</code> table reference
     */
    public TeamMembers(String alias) {
        this(DSL.name(alias), TEAM_MEMBERS);
    }

    /**
     * Create an aliased <code>public.team_members</code> table reference
     */
    public TeamMembers(Name alias) {
        this(alias, TEAM_MEMBERS);
    }

    /**
     * Create a <code>public.team_members</code> table reference
     */
    public TeamMembers() {
        this(DSL.name("team_members"), null);
    }

    public <O extends Record> TeamMembers(Table<O> path, ForeignKey<O, TeamMembersRecord> childPath, InverseForeignKey<O, TeamMembersRecord> parentPath) {
        super(path, childPath, parentPath, TEAM_MEMBERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TeamMembersPath extends TeamMembers implements Path<TeamMembersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TeamMembersPath(Table<O> path, ForeignKey<O, TeamMembersRecord> childPath, InverseForeignKey<O, TeamMembersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TeamMembersPath(Name alias, Table<TeamMembersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TeamMembersPath as(String alias) {
            return new TeamMembersPath(DSL.name(alias), this);
        }

        @Override
        public TeamMembersPath as(Name alias) {
            return new TeamMembersPath(alias, this);
        }

        @Override
        public TeamMembersPath as(Table<?> alias) {
            return new TeamMembersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TeamMembersRecord, Integer> getIdentity() {
        return (Identity<TeamMembersRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<ForeignKey<TeamMembersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEAM_MEMBERS__TEAM_MEMBERS_TEAM_ID_FKEY);
    }

    private transient TeamsPath _teams;

    /**
     * Get the implicit join path to the <code>public.teams</code> table.
     */
    public TeamsPath teams() {
        if (_teams == null)
            _teams = new TeamsPath(this, Keys.TEAM_MEMBERS__TEAM_MEMBERS_TEAM_ID_FKEY, null);

        return _teams;
    }

    @Override
    public TeamMembers as(String alias) {
        return new TeamMembers(DSL.name(alias), this);
    }

    @Override
    public TeamMembers as(Name alias) {
        return new TeamMembers(alias, this);
    }

    @Override
    public TeamMembers as(Table<?> alias) {
        return new TeamMembers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamMembers rename(String name) {
        return new TeamMembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamMembers rename(Name name) {
        return new TeamMembers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamMembers rename(Table<?> name) {
        return new TeamMembers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamMembers where(Condition condition) {
        return new TeamMembers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamMembers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamMembers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamMembers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamMembers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamMembers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamMembers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamMembers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamMembers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamMembers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
