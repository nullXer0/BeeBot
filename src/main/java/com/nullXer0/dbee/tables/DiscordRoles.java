/*
 * This file is generated by jOOQ.
 */
package com.nullXer0.dbee.tables;


import com.nullXer0.dbee.Keys;
import com.nullXer0.dbee.Public;
import com.nullXer0.dbee.tables.TeamRoles.TeamRolesPath;
import com.nullXer0.dbee.tables.Teams.TeamsPath;
import com.nullXer0.dbee.tables.records.DiscordRolesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DiscordRoles extends TableImpl<DiscordRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.discord_roles</code>
     */
    public static final DiscordRoles DISCORD_ROLES = new DiscordRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiscordRolesRecord> getRecordType() {
        return DiscordRolesRecord.class;
    }

    /**
     * The column <code>public.discord_roles.id</code>.
     */
    public final TableField<DiscordRolesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.discord_roles.team_id</code>.
     */
    public final TableField<DiscordRolesRecord, Integer> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.discord_roles.role_id</code>.
     */
    public final TableField<DiscordRolesRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.discord_roles.snowflake</code>.
     */
    public final TableField<DiscordRolesRecord, Long> SNOWFLAKE = createField(DSL.name("snowflake"), SQLDataType.BIGINT.nullable(false), this, "");

    private DiscordRoles(Name alias, Table<DiscordRolesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DiscordRoles(Name alias, Table<DiscordRolesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.discord_roles</code> table reference
     */
    public DiscordRoles(String alias) {
        this(DSL.name(alias), DISCORD_ROLES);
    }

    /**
     * Create an aliased <code>public.discord_roles</code> table reference
     */
    public DiscordRoles(Name alias) {
        this(alias, DISCORD_ROLES);
    }

    /**
     * Create a <code>public.discord_roles</code> table reference
     */
    public DiscordRoles() {
        this(DSL.name("discord_roles"), null);
    }

    public <O extends Record> DiscordRoles(Table<O> path, ForeignKey<O, DiscordRolesRecord> childPath, InverseForeignKey<O, DiscordRolesRecord> parentPath) {
        super(path, childPath, parentPath, DISCORD_ROLES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DiscordRolesPath extends DiscordRoles implements Path<DiscordRolesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DiscordRolesPath(Table<O> path, ForeignKey<O, DiscordRolesRecord> childPath, InverseForeignKey<O, DiscordRolesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DiscordRolesPath(Name alias, Table<DiscordRolesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DiscordRolesPath as(String alias) {
            return new DiscordRolesPath(DSL.name(alias), this);
        }

        @Override
        public DiscordRolesPath as(Name alias) {
            return new DiscordRolesPath(alias, this);
        }

        @Override
        public DiscordRolesPath as(Table<?> alias) {
            return new DiscordRolesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DiscordRolesRecord, Integer> getIdentity() {
        return (Identity<DiscordRolesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DiscordRolesRecord> getPrimaryKey() {
        return Keys.DISCORD_ROLES_PKEY;
    }

    @Override
    public List<UniqueKey<DiscordRolesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.DISCORD_ROLES_TEAM_ID_ROLE_ID_KEY);
    }

    @Override
    public List<ForeignKey<DiscordRolesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DISCORD_ROLES__DISCORD_ROLES_ROLE_ID_FKEY, Keys.DISCORD_ROLES__DISCORD_ROLES_TEAM_ID_FKEY);
    }

    private transient TeamRolesPath _teamRoles;

    /**
     * Get the implicit join path to the <code>public.team_roles</code> table.
     */
    public TeamRolesPath teamRoles() {
        if (_teamRoles == null)
            _teamRoles = new TeamRolesPath(this, Keys.DISCORD_ROLES__DISCORD_ROLES_ROLE_ID_FKEY, null);

        return _teamRoles;
    }

    private transient TeamsPath _teams;

    /**
     * Get the implicit join path to the <code>public.teams</code> table.
     */
    public TeamsPath teams() {
        if (_teams == null)
            _teams = new TeamsPath(this, Keys.DISCORD_ROLES__DISCORD_ROLES_TEAM_ID_FKEY, null);

        return _teams;
    }

    @Override
    public DiscordRoles as(String alias) {
        return new DiscordRoles(DSL.name(alias), this);
    }

    @Override
    public DiscordRoles as(Name alias) {
        return new DiscordRoles(alias, this);
    }

    @Override
    public DiscordRoles as(Table<?> alias) {
        return new DiscordRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DiscordRoles rename(String name) {
        return new DiscordRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DiscordRoles rename(Name name) {
        return new DiscordRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DiscordRoles rename(Table<?> name) {
        return new DiscordRoles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DiscordRoles where(Condition condition) {
        return new DiscordRoles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DiscordRoles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DiscordRoles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DiscordRoles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DiscordRoles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DiscordRoles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DiscordRoles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DiscordRoles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DiscordRoles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DiscordRoles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
