/*
 * This file is generated by jOOQ.
 */
package com.nullXer0.dbee.tables;


import com.nullXer0.dbee.Keys;
import com.nullXer0.dbee.Public;
import com.nullXer0.dbee.tables.DiscordRoles.DiscordRolesPath;
import com.nullXer0.dbee.tables.Teams.TeamsPath;
import com.nullXer0.dbee.tables.records.TeamRolesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TeamRoles extends TableImpl<TeamRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.team_roles</code>
     */
    public static final TeamRoles TEAM_ROLES = new TeamRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamRolesRecord> getRecordType() {
        return TeamRolesRecord.class;
    }

    /**
     * The column <code>public.team_roles.role_id</code>.
     */
    public final TableField<TeamRolesRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.team_roles.role</code>.
     */
    public final TableField<TeamRolesRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(31), this, "");

    private TeamRoles(Name alias, Table<TeamRolesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TeamRoles(Name alias, Table<TeamRolesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.team_roles</code> table reference
     */
    public TeamRoles(String alias) {
        this(DSL.name(alias), TEAM_ROLES);
    }

    /**
     * Create an aliased <code>public.team_roles</code> table reference
     */
    public TeamRoles(Name alias) {
        this(alias, TEAM_ROLES);
    }

    /**
     * Create a <code>public.team_roles</code> table reference
     */
    public TeamRoles() {
        this(DSL.name("team_roles"), null);
    }

    public <O extends Record> TeamRoles(Table<O> path, ForeignKey<O, TeamRolesRecord> childPath, InverseForeignKey<O, TeamRolesRecord> parentPath) {
        super(path, childPath, parentPath, TEAM_ROLES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TeamRolesPath extends TeamRoles implements Path<TeamRolesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TeamRolesPath(Table<O> path, ForeignKey<O, TeamRolesRecord> childPath, InverseForeignKey<O, TeamRolesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TeamRolesPath(Name alias, Table<TeamRolesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TeamRolesPath as(String alias) {
            return new TeamRolesPath(DSL.name(alias), this);
        }

        @Override
        public TeamRolesPath as(Name alias) {
            return new TeamRolesPath(alias, this);
        }

        @Override
        public TeamRolesPath as(Table<?> alias) {
            return new TeamRolesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TeamRolesRecord, Integer> getIdentity() {
        return (Identity<TeamRolesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeamRolesRecord> getPrimaryKey() {
        return Keys.TEAM_ROLES_PK;
    }

    private transient DiscordRolesPath _discordRoles;

    /**
     * Get the implicit to-many join path to the
     * <code>public.discord_roles</code> table
     */
    public DiscordRolesPath discordRoles() {
        if (_discordRoles == null)
            _discordRoles = new DiscordRolesPath(this, null, Keys.DISCORD_ROLES__DISCORD_ROLES_ROLE_ID_FKEY.getInverseKey());

        return _discordRoles;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.teams</code>
     * table
     */
    public TeamsPath teams() {
        return discordRoles().teams();
    }

    @Override
    public TeamRoles as(String alias) {
        return new TeamRoles(DSL.name(alias), this);
    }

    @Override
    public TeamRoles as(Name alias) {
        return new TeamRoles(alias, this);
    }

    @Override
    public TeamRoles as(Table<?> alias) {
        return new TeamRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamRoles rename(String name) {
        return new TeamRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamRoles rename(Name name) {
        return new TeamRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamRoles rename(Table<?> name) {
        return new TeamRoles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamRoles where(Condition condition) {
        return new TeamRoles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamRoles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamRoles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamRoles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamRoles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamRoles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamRoles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeamRoles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamRoles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeamRoles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
